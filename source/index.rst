#######################
Python 3.12の新機能紹介
#######################
.. raw:: html

   <a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /></a><br /><small>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</small>

はじめに
========

自己紹介
--------

今日話したいこと
----------------

このセミナーから得られるもの
----------------------------

新しい構文
==========

* PEP 695 ジェネリッククラス、ジェネリック関数を簡潔に書ける新構文の登場
* PEP 701 f-stringがネスト可能に

PEP 695 ジェネリッククラス、ジェネリック関数を簡潔に書ける新構文の登場
----------------------------------------------------------------------

型ヒントとは
------------

ジェネリッククラス、ジェネリック関数とは
----------------------------------------

PEP 695でどう変わったか
-----------------------

PEP 701 f-stringがネスト可能に
------------------------------

f-stringとは
------------

PEP 701でどう変わったか
-----------------------

パフォーマンスの改善
====================

* PEP 684 インタプリタごとに固有のGILが使われるように変更

PEP 684 インタプリタごとに固有のGILが使われるように変更
-------------------------------------------------------

GILとは
-------

PEP 684でどう変わったか
-----------------------

デバッグ・モニタリング方法の改善
================================

* PEP 669 ``sys.monitoring`` の追加
* エラーメッセージの改善（PEP番号はなし）

PEP 669 ``sys.monitoring`` の追加
---------------------------------

エラーメッセージの改善（PEP番号はなし）
---------------------------------------

その他新機能
============

* PEP 688 Pythonコードからバッファプロトコルにアクセスできるように
* PEP 692 ``*kwargs`` 引数に付けられる型ヒントに関する改善
* PEP 698 メソッドをオーバーライドする際のtypoを防ぐ ``override`` デコレータの登場

PEP 688 Pythonコードからバッファプロトコルにアクセスできるように
----------------------------------------------------------------

PEP 692 ``*kwargs`` 引数に付けられる型ヒントに関する改善
--------------------------------------------------------

``*kwargs`` 引数とは
--------------------

PEP 692でどう変わったか
-----------------------

PEP 698 メソッドをオーバーライドする際のtypoを防ぐ ``override`` デコレータの登場
--------------------------------------------------------------------------------

Pythonでメソッドをオーバーライドするには
----------------------------------------

``override`` デコレータを使うとどうなるか
-----------------------------------------

まとめ
======
